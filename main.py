import subprocess
import os
from telegram import InputFile, ReplyKeyboardMarkup, KeyboardButton, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

BOT_VERSION = "V0.3"
YOUR_NAME = "Tom V. | OverStyleFR"

# Fonction pour g√©rer la commande /start
def start(update, context):
    user_name = update.message.from_user.first_name  # R√©cup√®re le pr√©nom de l'utilisateur
    welcome_message = f"Bonjour {user_name} üëã\n\n Je suis un bot qui permet de t√©l√©charger des vid√©os/musiques via des liens de r√©seaux sociaux (principalement YouTube & TikTok)"
    
    # Envoie la r√©ponse en utilisant la fonction "reply_text" avec "reply_to_message_id"
    update.message.reply_text(welcome_message, reply_to_message_id=update.message.message_id)
    


# Modifie la fonction help
def help(update, context):
    # Cr√©er un paratexte en haut √† droite
    paratext = f"Version {BOT_VERSION}\nD√©velopp√© par {YOUR_NAME}"

    # Cr√©er une matrice de boutons pour les commandes disponibles
    buttons = [
        [KeyboardButton(text="/start"), KeyboardButton(text="/help")],
    ]

    # Ajouter des boutons suppl√©mentaires au besoin

    # Cr√©er un ReplyKeyboardMarkup avec les boutons
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)

    # Envoyer le message avec le paratexte en haut √† droite, les suggestions de commandes et le clavier pour les suggestions
    context.bot.send_message(
        chat_id=update.message.chat_id,
        text=f"Je suis un bot qui t√©l√©charge des vid√©os/musiques via des liens de r√©seaux sociaux. Voici les commandes qui me sont associ√©es:\n/start - Pour commencer\n/help - Pour obtenir de l'aide\n/download [LIEN] - Pour t√©l√©charger une vid√©o avec yt-dlp\n/music [LIEN] - Pour t√©l√©charger de la musique avec yt-dlp\n\n"
             f"Si tu m'envoies un lien directement, je tenterai automatiquement de t√©l√©charger la vid√©o associ√©e.\n\n<code>{paratext}</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=markup,
    )

# Fonction pour g√©rer les messages textuels
def handle_text_messages(update, context):
    text = update.message.text

    # V√©rifier si le texte est un lien commencant par "https"
    if text.startswith("https"):
        video_path = "downloaded_video.mp4"

        # Supprimer le fichier existant s'il y en a un
        if os.path.exists(video_path):
            os.remove(video_path)

        # Ex√©cuter la commande ./yt-dlp avec le lien et l'option -w pour √©craser le fichier existant
        try:
            result = subprocess.run(["./yt-dlp", "--format", "best", "-o", "downloaded_video.mp4", text], capture_output=True, text=True)
            output = result.stdout.strip() if result.stdout else result.stderr.strip()

            # Envoyer la vid√©o t√©l√©charg√©e
            if os.path.exists(video_path):
                video = open(video_path, "rb")
                context.bot.send_video(chat_id=update.message.chat_id, video=InputFile(video), caption="Voici votre vid√©o!", reply_to_message_id=update.message.message_id)
                video.close()
            else:
                context.bot.send_message(chat_id=update.message.chat_id, text="Erreur: La vid√©o t√©l√©charg√©e n'a pas √©t√© trouv√©e.")
        except Exception as e:
            context.bot.send_message(chat_id=update.message.chat_id, text=f"Erreur lors de l'ex√©cution de la commande: {str(e)}", reply_to_message_id=update.message.message_id)
    else:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"Je ne peux t√©l√©charger que des liens commencant par 'https'.")


# Fonction pour g√©rer la commande /download
def download(update, context):
    # R√©cup√©rer le lien depuis la commande ou directement depuis le texte du message
    link = " ".join(context.args) if context.args else update.message.text

    if not link:
        context.bot.send_message(chat_id=update.message.chat_id, text="Utilisation: /download [LIEN]")
        return

    # V√©rifier si le texte du message est un lien
    if not link.startswith("http"):
        context.bot.send_message(chat_id=update.message.chat_id, text="Erreur: Le texte n'est pas un lien.")
        return

    # Ex√©cuter la commande ./yt-dlp avec le lien
    try:
        result = subprocess.run(["./yt-dlp", "--format", "best", "-o", "downloaded_video.mp4", link], capture_output=True, text=True)
        output = result.stdout.strip() if result.stdout else result.stderr.strip()
        context.bot.send_message(chat_id=update.message.chat_id, text=output)

        # Envoyer la vid√©o t√©l√©charg√©e
        video_path = "downloaded_video.mp4"
        if os.path.exists(video_path):
            video = open(video_path, "rb")
            context.bot.send_video(chat_id=update.message.chat_id, video=InputFile(video), caption="Voici votre vid√©o!")
            video.close()
            os.remove(video_path)  # Supprimer le fichier apr√®s l'envoi
        else:
            context.bot.send_message(chat_id=update.message.chat_id, text="Erreur: La vid√©o t√©l√©charg√©e n'a pas √©t√© trouv√©e.")
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"Erreur lors de l'ex√©cution de la commande: {str(e)}")


# Fonction pour g√©rer la commande /music
def music(update, context):
    # R√©cup√©rer le lien depuis la commande
    link = " ".join(context.args)

    if not link:
        context.bot.send_message(chat_id=update.message.chat_id, text="Utilisation: /music [LIEN]")
        return

    # V√©rifier si le texte du message est un lien
    if not link.startswith("http"):
        context.bot.send_message(chat_id=update.message.chat_id, text="Erreur: Le texte n'est pas un lien.")
        return

    # Ex√©cuter la commande ./yt-dlp avec le lien pour t√©l√©charger la musique
    try:
        # Sp√©cifier le chemin vers ffmpeg et ffprobe
        ffmpeg_location = "ffmpeg-6.1-amd64-static/ffmpeg"  # Remplace avec le chemin correct
        result = subprocess.run(["./yt-dlp", "--extract-audio", "--audio-format", "mp3", "--ffmpeg-location", ffmpeg_location, "-o", "downloaded_music.%(ext)s", link], capture_output=True, text=True)
        output = result.stdout.strip() if result.stdout else result.stderr.strip()
        context.bot.send_message(chat_id=update.message.chat_id, text=output)

        # Envoyer la musique t√©l√©charg√©e
        music_path = "downloaded_music.mp3"
        if os.path.exists(music_path):
            music = open(music_path, "rb")
            context.bot.send_audio(chat_id=update.message.chat_id, audio=InputFile(music), caption="Voici votre musique!")
            music.close()
            os.remove(music_path)  # Supprimer le fichier apr√®s l'envoi
        else:
            context.bot.send_message(chat_id=update.message.chat_id, text="Erreur: La musique t√©l√©charg√©e n'a pas √©t√© trouv√©e.")
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"Erreur lors de l'ex√©cution de la commande: {str(e)}")





def main():
    # Token de votre bot Telegram
    token = "6977266339:AAHNxnhQn6pU_d0g7KioCOG7QclsUF0PBWk"

    # Initialisation de l'updater avec le token du bot
    updater = Updater(token=token, use_context=True)

    # Obtention du gestionnaire des commandes
    dp = updater.dispatcher

    # Ajout des gestionnaires de commandes
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("download", download, pass_args=True))
    dp.add_handler(CommandHandler("music", music, pass_args=True))

    # Ajout du gestionnaire pour les messages textuels
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text_messages))

    # D√©marrage du bot
    updater.start_polling()
    
    # Indication dans la console
    print("Le bot a d√©marr√© avec succ√®s!")

    # Arr√™t du bot lorsqu'on appuie sur Ctrl+C
    updater.idle()

if __name__ == "__main__":
    main()
